{"ast":null,"code":"import router from 'next/router';\nimport { isEmpty } from '@lib/index';\nimport axios from 'axios';\nconst client = axios.create({\n  baseURL: 'https://web-api.improver.com.tr/api/project/v1'\n});\nclient.defaults.timeout = 20000;\nclient.interceptors.response.use(config => config, error => {\n  const expectedError = error.response && error.response.status >= 400 && error.response.status < 500;\n\n  if (!expectedError) {\n    // toast.error('An unexpected error occurrred.');\n    console.error(error);\n  }\n\n  if (error.response.status === 401) {\n    // store.dispatch(logout(''));\n    router.push('/login');\n  }\n\n  return Promise.reject(error);\n});\n\nconst call = async (method, url, data = {}) => {\n  const accessToken = localStorage.getItem('token');\n  const headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  };\n\n  if (accessToken) {\n    client.defaults.headers.common['Authorization'] = 'Bearer ' + accessToken;\n  }\n\n  const request = {\n    headers,\n    method,\n    url\n  };\n\n  if (!isEmpty(data)) {\n    if (method === 'get') {\n      request.params = data;\n    } else {\n      request.data = data;\n    }\n  }\n\n  try {\n    const response = await client(request);\n    return Promise.resolve(response.data);\n  } catch (error) {\n    let err = null;\n\n    if (error.response) {\n      err = error.response;\n    } else if (error.request) {\n      err = {\n        message: error.request._response\n      };\n    } else {\n      err = error;\n    }\n\n    return Promise.reject(err);\n  }\n};\n\nconst file = async (url, data, onUploadProgress) => {\n  try {\n    const headers = {\n      Accept: 'application/json',\n      'Content-Type': 'multipart/form-data'\n    };\n    const response = await client({\n      url,\n      data,\n      method: 'post',\n      headers,\n      onUploadProgress\n    });\n    return Promise.resolve(response.data);\n  } catch (error) {\n    return Promise.reject(error.response);\n  }\n};\n\nexport default {\n  delete: (url, data) => call('delete', url, data),\n  get: (url, data) => call('get', url, data),\n  patch: (url, data) => call('patch', url, data),\n  post: (url, data) => call('post', url, data),\n  put: (url, data) => call('put', url, data),\n  file: (url, data, onUploadProgress) => file(url, data, onUploadProgress)\n};","map":{"version":3,"sources":["C:/Users/Ali/Desktop/improver/gate/api.ts"],"names":["router","isEmpty","axios","client","create","baseURL","defaults","timeout","interceptors","response","use","config","error","expectedError","status","console","push","Promise","reject","call","method","url","data","accessToken","localStorage","getItem","headers","Accept","common","request","params","resolve","err","message","_response","file","onUploadProgress","delete","get","patch","post","put"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,KAAP,MAA8B,OAA9B;AAEA,MAAMC,MAAM,GAAGD,KAAK,CAACE,MAAN,CAAa;AACxBC,EAAAA,OAAO,EAAE;AADe,CAAb,CAAf;AAIAF,MAAM,CAACG,QAAP,CAAgBC,OAAhB,GAA0B,KAA1B;AACAJ,MAAM,CAACK,YAAP,CAAoBC,QAApB,CAA6BC,GAA7B,CACKC,MAAD,IAAYA,MADhB,EAEKC,KAAD,IAAgB;AACZ,QAAMC,aAAa,GACfD,KAAK,CAACH,QAAN,IAAkBG,KAAK,CAACH,QAAN,CAAeK,MAAf,IAAyB,GAA3C,IAAkDF,KAAK,CAACH,QAAN,CAAeK,MAAf,GAAwB,GAD9E;;AAGA,MAAI,CAACD,aAAL,EAAoB;AAChB;AACAE,IAAAA,OAAO,CAACH,KAAR,CAAcA,KAAd;AACH;;AACD,MAAIA,KAAK,CAACH,QAAN,CAAeK,MAAf,KAA0B,GAA9B,EAAmC;AAC/B;AACAd,IAAAA,MAAM,CAACgB,IAAP,CAAY,QAAZ;AACH;;AACD,SAAOC,OAAO,CAACC,MAAR,CAAeN,KAAf,CAAP;AACH,CAfL;;AAkBA,MAAMO,IAAI,GAAG,OAAUC,MAAV,EAA0BC,GAA1B,EAAuCC,IAAS,GAAG,EAAnD,KAAsE;AAC/E,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAApB;AAEA,QAAMC,OAAO,GAAG;AACZC,IAAAA,MAAM,EAAE,kBADI;AAEZ,oBAAgB;AAFJ,GAAhB;;AAKA,MAAIJ,WAAJ,EAAiB;AACbpB,IAAAA,MAAM,CAACG,QAAP,CAAgBoB,OAAhB,CAAwBE,MAAxB,CAA+B,eAA/B,IAAkD,YAAYL,WAA9D;AACH;;AAED,QAAMM,OAAY,GAAG;AAAEH,IAAAA,OAAF;AAAWN,IAAAA,MAAX;AAAmBC,IAAAA;AAAnB,GAArB;;AAEA,MAAI,CAACpB,OAAO,CAACqB,IAAD,CAAZ,EAAoB;AAChB,QAAIF,MAAM,KAAK,KAAf,EAAsB;AAClBS,MAAAA,OAAO,CAACC,MAAR,GAAiBR,IAAjB;AACH,KAFD,MAEO;AACHO,MAAAA,OAAO,CAACP,IAAR,GAAeA,IAAf;AACH;AACJ;;AAED,MAAI;AACA,UAAMb,QAAQ,GAAG,MAAMN,MAAM,CAAC0B,OAAD,CAA7B;AACA,WAAOZ,OAAO,CAACc,OAAR,CAAgBtB,QAAQ,CAACa,IAAzB,CAAP;AACH,GAHD,CAGE,OAAOV,KAAP,EAAc;AACZ,QAAIoB,GAAG,GAAG,IAAV;;AACA,QAAIpB,KAAK,CAACH,QAAV,EAAoB;AAChBuB,MAAAA,GAAG,GAAGpB,KAAK,CAACH,QAAZ;AACH,KAFD,MAEO,IAAIG,KAAK,CAACiB,OAAV,EAAmB;AACtBG,MAAAA,GAAG,GAAG;AAAEC,QAAAA,OAAO,EAAErB,KAAK,CAACiB,OAAN,CAAcK;AAAzB,OAAN;AACH,KAFM,MAEA;AACHF,MAAAA,GAAG,GAAGpB,KAAN;AACH;;AACD,WAAOK,OAAO,CAACC,MAAR,CAAec,GAAf,CAAP;AACH;AACJ,CApCD;;AAsCA,MAAMG,IAAI,GAAG,OACTd,GADS,EAETC,IAFS,EAGTc,gBAHS,KAIR;AACD,MAAI;AACA,UAAMV,OAAO,GAAG;AACZC,MAAAA,MAAM,EAAE,kBADI;AAEZ,sBAAgB;AAFJ,KAAhB;AAIA,UAAMlB,QAAQ,GAAG,MAAMN,MAAM,CAAC;AAC1BkB,MAAAA,GAD0B;AAE1BC,MAAAA,IAF0B;AAG1BF,MAAAA,MAAM,EAAE,MAHkB;AAI1BM,MAAAA,OAJ0B;AAK1BU,MAAAA;AAL0B,KAAD,CAA7B;AAQA,WAAOnB,OAAO,CAACc,OAAR,CAAgBtB,QAAQ,CAACa,IAAzB,CAAP;AACH,GAdD,CAcE,OAAOV,KAAP,EAAc;AACZ,WAAOK,OAAO,CAACC,MAAR,CAAeN,KAAK,CAACH,QAArB,CAAP;AACH;AACJ,CAtBD;;AAwBA,eAAe;AACX4B,EAAAA,MAAM,EAAE,CAAahB,GAAb,EAA0BC,IAA1B,KAA8CH,IAAI,CAAI,QAAJ,EAAcE,GAAd,EAAmBC,IAAnB,CAD/C;AAEXgB,EAAAA,GAAG,EAAE,CAAajB,GAAb,EAA0BC,IAA1B,KAA8CH,IAAI,CAAI,KAAJ,EAAWE,GAAX,EAAgBC,IAAhB,CAF5C;AAGXiB,EAAAA,KAAK,EAAE,CAAalB,GAAb,EAA0BC,IAA1B,KAA8CH,IAAI,CAAI,OAAJ,EAAaE,GAAb,EAAkBC,IAAlB,CAH9C;AAIXkB,EAAAA,IAAI,EAAE,CAAanB,GAAb,EAA0BC,IAA1B,KAA8CH,IAAI,CAAI,MAAJ,EAAYE,GAAZ,EAAiBC,IAAjB,CAJ7C;AAKXmB,EAAAA,GAAG,EAAE,CAAapB,GAAb,EAA0BC,IAA1B,KAA8CH,IAAI,CAAI,KAAJ,EAAWE,GAAX,EAAgBC,IAAhB,CAL5C;AAMXa,EAAAA,IAAI,EAAE,CACFd,GADE,EAEFC,IAFE,EAGFc,gBAHE,KAIDD,IAAI,CAACd,GAAD,EAAMC,IAAN,EAAYc,gBAAZ;AAVE,CAAf","sourcesContent":["import router from 'next/router';\r\nimport { isEmpty } from '@lib/index';\r\nimport axios, { Method } from 'axios';\r\n\r\nconst client = axios.create({\r\n    baseURL: 'https://web-api.improver.com.tr/api/project/v1',\r\n});\r\n\r\nclient.defaults.timeout = 20000;\r\nclient.interceptors.response.use(\r\n    (config) => config,\r\n    (error: any) => {\r\n        const expectedError =\r\n            error.response && error.response.status >= 400 && error.response.status < 500;\r\n\r\n        if (!expectedError) {\r\n            // toast.error('An unexpected error occurrred.');\r\n            console.error(error);\r\n        }\r\n        if (error.response.status === 401) {\r\n            // store.dispatch(logout(''));\r\n            router.push('/login');\r\n        }\r\n        return Promise.reject(error);\r\n    },\r\n);\r\n\r\nconst call = async <T>(method: Method, url: string, data: any = {}): Promise<T> => {\r\n    const accessToken = localStorage.getItem('token');\r\n\r\n    const headers = {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n    };\r\n\r\n    if (accessToken) {\r\n        client.defaults.headers.common['Authorization'] = 'Bearer ' + accessToken;\r\n    }\r\n\r\n    const request: any = { headers, method, url };\r\n\r\n    if (!isEmpty(data)) {\r\n        if (method === 'get') {\r\n            request.params = data;\r\n        } else {\r\n            request.data = data;\r\n        }\r\n    }\r\n\r\n    try {\r\n        const response = await client(request);\r\n        return Promise.resolve(response.data);\r\n    } catch (error) {\r\n        let err = null;\r\n        if (error.response) {\r\n            err = error.response;\r\n        } else if (error.request) {\r\n            err = { message: error.request._response };\r\n        } else {\r\n            err = error;\r\n        }\r\n        return Promise.reject(err);\r\n    }\r\n};\r\n\r\nconst file = async (\r\n    url: string,\r\n    data: FormData,\r\n    onUploadProgress?: ((progressEvent: any) => void) | undefined,\r\n) => {\r\n    try {\r\n        const headers = {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'multipart/form-data',\r\n        };\r\n        const response = await client({\r\n            url,\r\n            data,\r\n            method: 'post',\r\n            headers,\r\n            onUploadProgress,\r\n        });\r\n\r\n        return Promise.resolve(response.data);\r\n    } catch (error) {\r\n        return Promise.reject(error.response);\r\n    }\r\n};\r\n\r\nexport default {\r\n    delete: <T, D = any>(url: string, data?: D | null) => call<T>('delete', url, data),\r\n    get: <T, D = any>(url: string, data?: D | null) => call<T>('get', url, data),\r\n    patch: <T, D = any>(url: string, data?: D | null) => call<T>('patch', url, data),\r\n    post: <T, D = any>(url: string, data?: D | null) => call<T>('post', url, data),\r\n    put: <T, D = any>(url: string, data?: D | null) => call<T>('put', url, data),\r\n    file: (\r\n        url: string,\r\n        data: FormData,\r\n        onUploadProgress: ((progressEvent: any) => void) | undefined,\r\n    ) => file(url, data, onUploadProgress),\r\n};\r\n"]},"metadata":{},"sourceType":"module"}